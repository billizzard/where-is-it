<?php
namespace tests\models;
use app\constants\UserConstants;
use app\models\User;

class UserTest extends \Codeception\Test\Unit
{
    public function _before()
    {
        User::deleteAll();
        \Yii::$app->db->createCommand()->insert(User::tableName(), [
            'email' => 'admin@gmail.com',
            'password' => '$2y$13$Mh4qTqu1gYcbDYPtUQZWiuz9BmcgsmKmKKXShMCoUOYjkiLx66Z8K',
            'login' => 'admin',
        ])->execute();

        \Yii::$app->db->createCommand()->insert(User::tableName(), [
            'email' => 'adminDeleted@gmail.com',
            'password' => '$2y$13$Mh4qTqu1gYcbDYPtUQZWiuz9BmcgsmKmKKXShMCoUOYjkiLx66Z8K',
            'login' => 'adminDeleted',
            'is_deleted' => true
        ])->execute();

        parent::_before(); // TODO: Change the autogenerated stub
    }

    public function testValidateEmptyValues()
    {
        $model = new User();
        $this->assertFalse($model->validate(), 'model is not valid');
        $this->assertArrayHasKey('email', $model->getErrors(), 'email has error');
        $this->assertArrayHasKey('password', $model->getErrors(), 'password has error');
    }

    public function testValidateWrongValues()
    {
        $model = new User([
            'email' => 'aa.aa',
            'password' => 'aaaaaa'
        ]);

        $this->assertFalse($model->validate(), 'model is not valid');
        $this->assertArrayHasKey('email', $model->getErrors(), 'email has error');
    }

    public function testValidateUniqueValues()
    {
        $model = new User([
            'email' => 'admin@gmail.com',
            'login' => 'admin'
        ]);

        $this->assertFalse($model->validate(), 'model is not valid');
        $this->assertArrayHasKey('email', $model->getErrors(), 'email not unique');
        $this->assertArrayHasKey('login', $model->getErrors(), 'login not unique');
    }

    public function testScenarioChangePasswordEmptyValues()
    {
        $model = User::findOne(['email' => 'admin@gmail.com']);
        $model->setScenario(UserConstants::SCENARIO['CHANGE_PASSWORD']);
        $this->assertFalse($model->validate(), 'model is not valid');
        $this->assertArrayHasKey('new_password', $model->getErrors(), 'new_password has error');
        $this->assertArrayHasKey('old_password', $model->getErrors(), 'old_password has error');
        $this->assertArrayHasKey('re_password', $model->getErrors(), 're_password has error');
    }

    public function testScenarioChangePasswordWrongValues()
    {
        $model = User::findOne(['email' => 'admin@gmail.com']);
        $model->setScenario(UserConstants::SCENARIO['CHANGE_PASSWORD']);
        $model->new_password = 'bbbbbb';
        $model->old_password = 'gggggg';
        $model->re_password = 'dddddd';
        $this->assertFalse($model->validate(), 'model is not valid');
        $this->assertArrayHasKey('new_password', $model->getErrors(), 're_password has error');
        $this->assertArrayHasKey('old_password', $model->getErrors(), 'old_password has error');
    }

    public function testScenarioChangePasswordCorrectValues()
    {
        $model = User::findOne(['email' => 'admin@gmail.com']);
        $model->setScenario(UserConstants::SCENARIO['CHANGE_PASSWORD']);
        $model->new_password = 'bbbbbb';
        $model->old_password = 'aaaaaa';
        $model->re_password = 'bbbbbb';
        $this->assertTrue($model->validate(), 'model is not valid');
    }

    public function testFindByEmail()
    {
        $this->assertNotEmpty(User::findByEmail('admin@gmail.com'));
        $this->assertEmpty(User::findByEmail('adminWrong@gmail.com'));
        $this->assertEmpty(User::findByEmail('adminDeleted@gmail.com'));
    }

}
