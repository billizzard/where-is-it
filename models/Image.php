<?php

namespace app\models;

use app\components\ApiException;
use app\components\file\FileHandler;
use app\components\file\FileHelper;
use app\components\file\FileTempHandler;
use app\components\file\ImageMainHandler;
use app\components\file\ImageTempHandler;
use app\components\SiteException;
use app\constants\AppConstants;
use app\constants\ImageConstants;
use yii\behaviors\TimestampBehavior;
use yii\web\UploadedFile;

/**
 * This is the model class for table "{{%image}}".
 *
 * @property integer id
 * @property integer place_id
 * @property string url
 * @property string description
 * @property integer status
 * @property integer type
 * @property integer created_at
 */

class Image extends \yii\db\ActiveRecord
{
    public $files;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%image}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['place_id'], 'required', 'on' => Image::SCENARIO_DEFAULT],
            [['place_id', 'status', 'type', 'created_at'], 'number'],
            [['description'], 'string', 'max' => 255],
            [['url'], 'file', 'skipOnEmpty' => true, 'extensions' => 'png, jpg', 'maxSize' => 1024 * 1024 * 2, 'tooBig' => 'Максимум 2MB'],
            [['files'], 'file', 'skipOnEmpty' => true, 'extensions' => 'png, jpg', 'maxSize' => 1024 * 1024 * 2, 'tooBig' => 'Максимум 2MB', 'maxFiles' => 4, 'on' => ImageConstants::SCENARIO['TEMP']],

        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'place_id' => 'Место',
            'status' => 'Статус',
            'type' => 'Тип',
            'url' => 'Путь',
            'description' => 'Описание',
            'created_at' => 'Дата создания',
        ];
    }

    public function beforeDelete()
    {
        ImageMainHandler::deleteFiles($this->getUrl());
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }


    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'updatedAtAttribute' => false
            ]
        ];
    }


    public static function findByPlaceId($place_id)
    {
        return self::find()->andWhere('place_id = :place_id',[':place_id' => $place_id]);
    }

    public static function findGallery($place_id)
    {
        return self::find()->andWhere(['type' => ImageConstants::TYPE['GALLERY'], 'status' => AppConstants::STATUS['MODERATE']])
        ->andWhere('place_id = :place_id', [':place_id' => $place_id]);
    }

    public function getMainImages()
    {
        return ImageMainHandler::getAllImages($this->getUrl());
    }

    public function getPlace()
    {
        return $this->hasOne(Place::className(), ['id' => 'place_id']);
    }

    public function uploadMainImage(Place $model) {
        $this->url = UploadedFile::getInstance($this, 'url');

        if ($this->url) {
            if ($oldImage = $model->mainImage) {
                $oldImage->delete();
            }
            $this->place_id = $model->id;
            $name = uniqid() . '.' . $this->url->extension;
            $url = $model->getDir() . '/' . $name;

            if ($this->validate()) {
                $this->url->saveAs($url);
                ImageMainHandler::createThumbs($url);
                $this->url = $url;
                $this->type = ImageConstants::TYPE['MAIN'];
                return $this->save();
            } else {
                throw new SiteException($this->getErrors(), 400);
            }
        }
    }

    public function uploadTempImages()
    {
        $urls = [];
        $this->files = UploadedFile::getInstances($this, 'url');

        if ($this->validate()) {
            foreach ($this->files as $file) {
                $dir = ImageTempHandler::getTempDir();
                $name = uniqid() . '.' . $file->extension;

                $url = $dir . '/' . $name;

                if ($file) {
                    $file->saveAs($url);
                    ImageTempHandler::createThumbs($url);
                    $urls[] = $url;
                }
            }
        } else {
            throw new ApiException($this->getErrors(), 400);
        }

        return $urls;


    }

//    public function uploadTempImage()
//    {
//        $this->url = UploadedFile::getInstances($this, 'url');
//
//        $dir = ImageTempHandler::getTempDir();
//        $name = uniqid() . '.' . $this->url->extension;
//
//        $url = $dir . '/' . $name;
//
//        if ($this->url) {
//            if ($this->validate()) {
//                $this->url->saveAs($url);
//                ImageTempHandler::createThumbs($url);
//                $this->url = $url;
//            } else {
//                throw new ApiException($this->getErrors(), 400);
//            }
//        }
//    }

    public static function createMainImageFromTemp(Place $place, $tempImageUrl)
    {
        if ($url = FileHelper::moveFileToDir($tempImageUrl, $place->getDir())) {
            $image = new Image();
            $image->setUrl($url);
            $image->setPlaceId($place->id);
            $image->type = ImageConstants::TYPE['MAIN'];
            if ($image->save()) {
                ImageMainHandler::createThumbs($image->getUrl());
            }
        }
    }

    public function getId() { return $this->id; }
    public function getUrl() { return $this->url; }
    public function setUrl($val) { $this->url = $val; }
    public function setPlaceId($val) { $this->place_id = $val; }

}
