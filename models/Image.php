<?php

namespace app\models;

use app\components\ApiException;
use app\components\file\FileHandler;
use app\components\file\FileTempHandler;
use app\components\file\ImageMainHandler;
use app\components\file\ImageTempHandler;
use app\components\SiteException;
use app\constants\ImageConstants;
use yii\behaviors\TimestampBehavior;
use yii\web\UploadedFile;

/**
 * This is the model class for table "{{%image}}".
 *
 * @property integer id
 * @property integer place_id
 * @property string url
 * @property string description
 * @property integer status
 * @property integer type
 * @property integer created_at
 */

class Image extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%image}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['place_id', 'url'], 'required', 'on' => Image::SCENARIO_DEFAULT],
            [['url'], 'required', 'on' => ImageConstants::SCENARIO['TEMP']],
            [['place_id', 'status', 'type', 'created_at'], 'number'],
            //[['url'], 'string', 'max' => 100],
            [['description'], 'string', 'max' => 255],
            [['url'], 'file', 'skipOnEmpty' => true, 'extensions' => 'png, jpg', 'maxSize' => 1024 * 1024 * 2, 'tooBig' => 'Максимум 2MB'],

        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'place_id' => 'Место',
            'status' => 'Статус',
            'type' => 'Тип',
            'url' => 'Путь',
            'description' => 'Описание',
            'created_at' => 'Дата создания',
        ];
    }

    public function beforeDelete()
    {
        ImageMainHandler::deleteFiles($this->getUrl());
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }


    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'updatedAtAttribute' => false
            ]
        ];
    }


    public static function findByPlaceId($place_id)
    {
        return self::find()->andWhere('place_id = :place_id',[':place_id' => $place_id]);
    }

    public function getMainImages()
    {
        return ImageMainHandler::getAllImages($this->getUrl());
    }

    public function getPlace()
    {
        return $this->hasOne(Place::className(), ['id' => 'place_id']);
    }

    public function uploadMainImage(Place $model) {
        $this->url = UploadedFile::getInstance($this, 'url');

        if ($this->url) {
            if ($oldImage = $model->mainImage) {
                $oldImage->delete();
            }
            $this->place_id = $model->id;
            $name = uniqid() . '.' . $this->url->extension;
            $url = $model->getDir() . '/' . $name;

            if ($this->validate()) {
                $this->url->saveAs($url);
                ImageMainHandler::createThumbs($url);
                $this->url = $url;
                $this->type = ImageConstants::TYPE['MAIN'];
                if (!$this->save()) {
                }
                return true;
            } else {
                throw new SiteException($this->getErrors(), 400);
            }
        }
    }

    public function uploadTempImage()
    {
        $this->url = UploadedFile::getInstance($this, 'url');

        $dir = ImageTempHandler::getTempDir();
        $name = uniqid() . '.' . $this->url->extension;

        $url = $dir . '/' . $name;

        if ($this->url) {
            if ($this->validate()) {
                $this->url->saveAs($url);
                ImageTempHandler::createThumbs($url);
                $this->url = $url;
            } else {
                throw new ApiException($this->getErrors(), 400);
            }
        }
    }

    public function getUrl() { return $this->url; }

    public function getId() { return $this->id; }

}
