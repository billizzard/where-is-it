<?php

namespace app\models;

use app\components\SiteException;
use app\constants\AppConstants;
use app\constants\UserConstants;


class BaseModel extends \yii\db\ActiveRecord
{

    public static function findOneModel($condition)
    {
        $model = self::findOne($condition);
        if ($model) return $model;
        throw new SiteException('Объект не найден', 404);
    }

    /**
     * Делает пометку в объекте, что он удален
     * @return bool
     */
    public function softDelete() {
        if ($this->hasAttribute('is_deleted')) {
            $this->is_deleted = true;
            if ($this->save()) {
                return true;
            }
        }
        return false;
    }

    /**
     * Возвращает дубликат модели
     * @return BaseModel
     */
    public function getDuplicate() {
        /** @var User $user */
        $user = \Yii::$app->user->getIdentity();
        return $user && $user->hasAccess(UserConstants::RULE['NO_DUPLICATE']) ? $this : $this->createDuplicate();
    }

    /**
     * Создает дубликат модели
     * @return BaseModel
     */
    public function createDuplicate() {
        $class = $this::className();
        /** @var BaseModel $clone */
        $clone = new $class();
        $clone->attributes = $this->attributes;

        if ($clone->hasAttribute('parent_id')) {
            if (!$clone->parent_id) {
                $clone->parent_id = $this->id;
            }
        }

        if ($clone->hasAttribute('status')) {
            $clone->status = AppConstants::STATUS['NO_MODERATE'];
        }
        return $clone;
    }

    /**
     * Можно ли редактировать данную модель
     * @return bool
     */
    public function isUpdatable() {
        /** @var User $user */
        $user = \Yii::$app->user->getIdentity();
        if ($user->hasAccess(UserConstants::RULE['OWNER'], ['model' => $this])) {
            return true;
        }
        return false;
    }

    /**
     * Можно ли удалять данную модель, используется для отображения значка мягкого удаления
     * @return bool
     */
    public function isSoftDeletable() {
        /** @var User $user */
        $user = \Yii::$app->user->getIdentity();
        if ($user->hasAccess(UserConstants::RULE['OWNER'], ['model' => $this])) {
            return true;
        }
        return false;
    }

    public function isDeletable() {
        /** @var User $user */
        $user = \Yii::$app->user->getIdentity();
        if ($user->hasAccess(UserConstants::RULE['DELETE_MODEL_FULL'])) {
            return true;
        }
        return false;
    }

    public static function find()
    {
        return parent::find()->andWhere([static::tableName() . '.is_deleted' => false]); // TODO: Change the autogenerated stub
    }

    public function beforeSave($insert)
    {
        if ($insert) {
            if ($this->hasAttribute('ip')) {
                $this->ip = ip2long($_SERVER['REMOTE_ADDR']);
            }
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function getDir() {
        return $this->place->getDir();
    }

    public function copyToParent() {
        if ($this->parent_id) {
            $parent = self::findOneModel($this->parent_id);
            $attributes = $this->attributeForParent();
            foreach ($attributes as $attribute) {
                $parent->{$attribute} = $this->{$attribute};
            }
            $parent->save();
        }
    }


}
