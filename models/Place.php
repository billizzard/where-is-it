<?php

namespace app\models;

use yii\behaviors\TimestampBehavior;

/**
 * This is the model class for table "{{%place}}".
 *
 * @property integer id
 * @property string name
 * @property string description
 * @property integer category_id
 * @property integer status
 * @property double lat
 * @property double lon
 * @property string address
 * @property string created_ip
 * @property string created_at
 * @property string updated_at
 */

class Place extends \yii\db\ActiveRecord
{
    public $category;
    public $image;

    const STATUS_NO_MODERATE = 0;
    const STATUS_MODERATE = 1;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%place}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name', 'category_id', 'lat', 'lon'], 'required'],
            [['lat', 'lon', 'category_id', 'status'], 'number'],
            [['name', 'address'], 'string', 'max' => 255],
            [['description'], 'string'],
            [['category'], 'string'],
            //[['image'], 'file', 'skipOnEmpty' => false, 'extensions' => 'png, jpg'],

        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'name' => 'Название',
            'category_id' => 'Категория',
            'lat' => 'Координаты',
            'lon' => 'Координаты',
            'address' => 'Адрес',
            'description' => 'Описание',
            'created_ip' => 'ip создателя',
            'status' => 'Статус',
        ];
    }

    public function beforeSave($insert)
    {
        if ($insert) {
            $this->created_ip = $_SERVER['REMOTE_ADDR'];
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public static function findByCategoryId($category_id, $size) {
        $category_id = (int)$category_id;
        $latMin = $size[0][0];
        $latMax = $size[1][0];
        $lonMin = $size[0][1];
        $lonMax = $size[1][1];
        return self::find()->andWhere(['category_id' => $category_id])
            ->andWhere('lat >= :latMin AND lat <= :latMax AND lon >= :lonMin AND lon <= :lonMax',
                ['latMin' => $latMin, 'latMax' => $latMax, 'lonMin' => $lonMin, 'lonMax' => $lonMax]);
    }

    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                //'updatedAtAttribute' => false
            ]
        ];
    }

    public static function getStatusesMap()
    {
        return [
            self::STATUS_NO_MODERATE => 'Не проверено',
            self::STATUS_MODERATE => 'Проверено'
        ];
    }

    public function upload()
    {
        $image = new Image();
        $url = 'uploads/' . $this->image->baseName . '.' . $this->image->extension;
        $this->image->saveAs($url);
        if ($image->upload($this->id)) {
            $this->image = 'yes';
            if (!$image->save()) {
                echo "<pre>";
                var_dump($image->getErrors());
                die();
            }
            return true;
        }
        return false;

    }

}
